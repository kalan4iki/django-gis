from django.core.management.base import BaseCommand, CommandError
from bot.models import KNDhistor, DIPhistor, MKDhistor, Usersbot
from gis.settings import token, konfmain, DEBUG
from bot.plot import plot
import telebot
import logging
import traceback
import urllib
import pandas as pd
from telebot import types
from datetime import timedelta, datetime

logging.basicConfig(filename="logs.log", level=logging.INFO)
bot = telebot.TeleBot(token)

@bot.message_handler(commands=['start'])
def send_welcome(message):
	bot.send_message(
		message.chat.id,
		'''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. ‚úå
–ë–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ KND.
		''', reply_markup=keyboard('0'))

@bot.message_handler(content_types=["text"])
def send_anytext(message):
    now = datetime.now()
    times = str(now.hour) + ':' + str(now.minute) + ':' + str(now.second)
    if now.day < 10:
        tinow = "0" + str(now.day) + "." + str(now.month) + "." + str(now.year)
    else:
        tinow = str(now.day) + "." + str(now.month) + "." + str(now.year)
    if message.text == "–û—Ç—á–µ—Ç—ã.":
        bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–µ—Ç–µ –æ—Ç—á–µ—Ç—ã –ø–æ —Ç–µ–º–∞—Ç–∏–∫–∞–º.', reply_markup=keyboard('1'))
    elif message.text == "–î–∏–Ω–∞–º–∏–∫–∏.":
        bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–µ—Ç–µ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–∞–º.', reply_markup=keyboard('2'))
    elif message.text == "–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é.":
        bot.send_message(message.chat.id, '–ù–∞ –≥–ª–∞–≤–Ω—É—é.', reply_markup=keyboard('0'))
    elif message.text == '‚úâÔ∏è –î–≤–æ—Ä—ã.' or message.text == '/otch':
        try:
            b = KNDhistor.objects.filter(date=tinow)
            #if config.debug == True: logging.debug(str(b))
            if len(b) != 0:
                a = b[0]
                #text = f'–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω –æ—Å–º–æ—Ç—Ä {a.complete} –¥–≤–æ—Ä–æ–≤ –∏–∑ {a.maxdvor}. –ê –∏–º–µ–Ω–Ω–æ {a.proc}%.'
                text = f'–ù–∞ {a.times.hour + 3}:{a.times.minute} {a.times.day}.{a.times.month}.{a.times.year} –ø—Ä–æ–≤–µ–¥–µ–Ω –æ—Å–º–æ—Ç—Ä {a.complete} –¥–≤–æ—Ä–æ–≤ –∏–∑ {a.maxdvor}. –ê –∏–º–µ–Ω–Ω–æ {a.proc}%.'
            else:
                text = '–ù–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –µ—â—ë –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'
            logging.info('BOT ' + times + " successfully")
            bot.send_message(message.chat.id, text)
        except:
            logging.error('BOT ' + times + " Error data: " + traceback.format_exc())
            bot.send_message(message.from_user.id, '–ë—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.')
    elif message.text == 'üìä –î–≤–æ—Ä—ã.':
        try:
            names = plot('knd')
            photo = open(names, 'rb')
            bot.send_photo(message.chat.id, photo)
            photo.close()
        except:
            logging.error('BOT ' + times + " Error data: " + traceback.format_exc())
            bot.send_message(message.from_user.id, '–ë—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.')
    elif message.text == '‚úâÔ∏è –î–ò–ü.':
        try:
            b = DIPhistor.objects.filter(date=tinow)
            #if config.debug == True: logging.debug(str(b))
            if len(b) != 0:
                a = b[0]
                #text =  f'–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω –æ—Å–º–æ—Ç—Ä {a.complete} –î–ò–ü –∏–∑ {a.maxdvor}. –ê –∏–º–µ–Ω–Ω–æ {a.proc}%.'
                text =  f'–ù–∞ {a.times.hour + 3}:{a.times.minute} {a.times.day}.{a.times.month}.{a.times.year} –ø—Ä–æ–≤–µ–¥–µ–Ω –æ—Å–º–æ—Ç—Ä {a.complete} –î–ò–ü –∏–∑ {a.maxdvor}. –ê –∏–º–µ–Ω–Ω–æ {a.proc}%.'
            else:
                text = '–ù–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –µ—â—ë –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'
            logging.info('BOT ' + times + " successfully")
            bot.send_message(message.chat.id, text)
        except:
            logging.error('BOT ' + times + " Error data: " + traceback.format_exc())
            bot.send_message(message.from_user.id, '–ë—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.')
    elif message.text == '‚úâÔ∏è –ú–ö–î.':
        try:
            b = MKDhistor.objects.filter(date=tinow)
            if len(b) != 0:
                a = b[0]
                #text =  f'–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω –æ—Å–º–æ—Ç—Ä {a.complete} –ú–ö–î –∏–∑ {a.maxdvor}. –ê –∏–º–µ–Ω–Ω–æ {a.proc}%.'
                text =  f'–ù–∞ {a.times.hour + 3}:{a.times.minute} {a.times.day}.{a.times.month}.{a.times.year} –ø—Ä–æ–≤–µ–¥–µ–Ω –æ—Å–º–æ—Ç—Ä {a.complete} –î–ò–ü –∏–∑ {a.maxdvor}. –ê –∏–º–µ–Ω–Ω–æ {a.proc}%.'
            else:
                text = '–ù–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –µ—â—ë –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'
            logging.info('BOT ' + times + " successfully")
            bot.send_message(message.chat.id, text)
        except:
            logging.error('BOT ' + times + " Error data: " + traceback.format_exc())
            bot.send_message(message.from_user.id, '–ë—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.')
    elif message.text == 'üìä –î–ò–ü.':
        try:
            names = plot('dip')
            photo = open(names, 'rb')
            bot.send_photo(message.chat.id, photo)
            photo.close()
        except:
            logging.error('BOT ' + times + " Error data: " + traceback.format_exc())
            bot.send_message(message.from_user.id, '–ë—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.')
    elif message.text == 'üìä –ú–ö–î.':
        try:
            names = plot('mkd')
            photo = open(names, 'rb')
            bot.send_photo(message.chat.id, photo)
            photo.close()
        except:
            logging.error('BOT ' + times + " Error data: " + traceback.format_exc())
            bot.send_message(message.from_user.id, '–ë—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.')
    elif message.text == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.':
        text = '–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.'
        bot.send_message(message.chat.id, text)
    elif message.text.split(' ')[0] == '/adddip':
        a = message.text.split(' ')
        data = {'date': a[1], 'alldv': a[2], 'complete': a[3], 'proc': a[4]}
        #editdb('dip', data)
        text = f'–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.'
        bot.send_message(message.chat.id, text)
    elif message.text == '–û–±—â–∏–π –æ—Ç—á—ë—Ç.':
        temp = [KNDhistor.objects.filter(date=tinow), DIPhistor.objects.filter(date=tinow), MKDhistor.objects.filter(date=tinow)]
        temp2 = [[], [], []]
        for i in temp:
            if len(i) != 0:
                j[0].append(str(i[0].maxdvor))
                j[1].append(str(i[0].complete))
                j[2].append(str(i[0].proc))
            else:
                j[0].append(str(0))
                j[1].append(str(0))
                j[2].append(str(0))
            temp2.append(j)
        print(temp2)
        temp3 = pd.DataFrame({'–í—Å–µ–≥–æ': [j[0]],
                            '–í—ã–ø–æ–ª–Ω–µ–Ω–æ': [j[1]],
                            '–ü—Ä–æ—Ü–µ–Ω—Ç–æ–≤': [j[2]]
                            }, index = ['–î–≤–æ—Ä—ã', '–î–ò–ü', '–ú–ö–î'])
        bot.send_message(message.chat.id, temp3)

def keyboard(a):
    markup = types.ReplyKeyboardMarkup(row_width=4, resize_keyboard=True)
    if a == '0':
        btn1 = types.KeyboardButton('–û—Ç—á–µ—Ç—ã.')
        btn2 = types.KeyboardButton('–î–∏–Ω–∞–º–∏–∫–∏.')
        btn3 = types.KeyboardButton('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.')
        markup.add(btn1, btn2)
        markup.row(btn3)
    elif a == '1':
        btn1 = types.KeyboardButton('‚úâÔ∏è –î–≤–æ—Ä—ã.')
        btn2 = types.KeyboardButton('‚úâÔ∏è –î–ò–ü.')
        btn3 = types.KeyboardButton('‚úâÔ∏è –ú–ö–î.')
        btn4 = types.KeyboardButton('–û–±—â–∏–π –æ—Ç—á—ë—Ç.')
        btn5 = types.KeyboardButton('–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é.')
        markup.row(btn1, btn2, btn3)
        markup.row(btn4)
        markup.row(btn5)
    elif a == '2':
        btn1 = types.KeyboardButton('üìä –î–≤–æ—Ä—ã.')
        btn2 = types.KeyboardButton('üìä –î–ò–ü.')
        btn3 = types.KeyboardButton('üìä –ú–ö–î.')
        btn4 = types.KeyboardButton('–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é.')
        markup.row(btn1, btn2, btn3)
        markup.row(btn4)
    return markup


class Command(BaseCommand):
    help = '–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞'

#    def add_arguments(self, parser):
#        parser.add_argument('poll_id', nargs='+', type=int)

    def handle(self, *args, **options):
        bot.polling(none_stop=True)
